{
	"name": "multipefolderspipeline_full_incremental_V1",
	"properties": {
		"activities": [
			{
				"name": "GetMetadataOfFiles",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "empfolder",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"modifiedDatetimeStart": {
							"value": "@pipeline().parameters.windowStart",
							"type": "Expression"
						},
						"modifiedDatetimeEnd": {
							"value": "@pipeline().parameters.windowEnd",
							"type": "Expression"
						},
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "ForEachFileInfolder",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetMetadataOfFiles",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetMetadataOfFiles').output.childItems",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "GetMetadataoftable",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "multipletables",
									"type": "DatasetReference",
									"parameters": {
										"tablename": {
											"value": "@replace(item().name,'.csv','')",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"exists"
								]
							}
						},
						{
							"name": "filename",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "file",
								"value": {
									"value": "@item().name",
									"type": "Expression"
								}
							}
						},
						{
							"name": "ConditionToCheckTableExistsOrNot",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "GetMetadataoftable",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "filename",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(activity('GetMetadataoftable').output.exists,not(true))",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "UpsertCopyActivity",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "AppendUpsertColumn",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DelimitedTextSource",
												"additionalColumns": [
													{
														"name": "InsertedAt",
														"value": {
															"value": "@utcnow()",
															"type": "Expression"
														}
													}
												],
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"modifiedDatetimeStart": {
														"value": "@pipeline().parameters.windowStart",
														"type": "Expression"
													},
													"modifiedDatetimeEnd": {
														"value": "@pipeline().parameters.windowEnd",
														"type": "Expression"
													},
													"wildcardFileName": {
														"value": "@variables('file')",
														"type": "Expression"
													},
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "DelimitedTextReadSettings"
												}
											},
											"sink": {
												"type": "AzureSqlSink",
												"writeBehavior": "upsert",
												"upsertSettings": {
													"useTempDB": true,
													"keys": {
														"value": "@variables('UpsertColumn')",
														"type": "Expression"
													}
												},
												"sqlWriterUseTableLock": false,
												"disableMetricsCollection": false
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "adlsempfile",
												"type": "DatasetReference",
												"parameters": {
													"filename": {
														"value": "@variables('file')",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "multipletables",
												"type": "DatasetReference",
												"parameters": {
													"tablename": {
														"value": "@replace(variables('file'),'.csv','')",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "ExecutecheckPipelineForColumn",
										"description": "to get the column",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"policy": {
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "checkdatapipeline",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"tablename": {
													"value": "@replace(variables('file'),'.csv','')",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "AppendUpsertColumn",
										"type": "AppendVariable",
										"dependsOn": [
											{
												"activity": "ExecutecheckPipelineForColumn",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "UpsertColumn",
											"value": {
												"value": "@activity('ExecutecheckPipelineForColumn').output.pipelineReturnValue.column",
												"type": "Expression"
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "AutoCopyActivity",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DelimitedTextSource",
												"additionalColumns": [
													{
														"name": "InsertedAt",
														"value": {
															"value": "@utcnow()",
															"type": "Expression"
														}
													}
												],
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"modifiedDatetimeStart": {
														"value": "@pipeline().parameters.windowStart",
														"type": "Expression"
													},
													"modifiedDatetimeEnd": {
														"value": "@pipeline().parameters.windowEnd",
														"type": "Expression"
													},
													"wildcardFileName": {
														"value": "@variables('file')",
														"type": "Expression"
													},
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "DelimitedTextReadSettings"
												}
											},
											"sink": {
												"type": "AzureSqlSink",
												"writeBehavior": "insert",
												"sqlWriterUseTableLock": false,
												"tableOption": "autoCreate",
												"disableMetricsCollection": false
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "empfilefrmadls",
												"type": "DatasetReference",
												"parameters": {
													"filename": {
														"value": "@variables('file')",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "multipletables",
												"type": "DatasetReference",
												"parameters": {
													"tablename": {
														"value": "@replace(variables('file'),'.csv','')",
														"type": "Expression"
													}
												}
											}
										]
									}
								]
							}
						}
					]
				}
			}
		],
		"parameters": {
			"windowStart": {
				"type": "string"
			},
			"windowEnd": {
				"type": "string"
			}
		},
		"variables": {
			"file": {
				"type": "String"
			},
			"UpsertColumn": {
				"type": "Array"
			}
		},
		"annotations": [],
		"lastPublishTime": "2024-05-09T09:31:00Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}