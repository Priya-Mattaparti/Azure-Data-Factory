{
	"name": "PPPdataflowtransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PPP_Loan_Dataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_ABS_AccountKey",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LoanRange as string,",
				"          BusinessName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          NAICSCode as string,",
				"          BusinessType as string,",
				"          RaceEthnicity as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          NonProfit as string,",
				"          JobsRetained as string,",
				"          DateApproved as string,",
				"          Lender as string,",
				"          CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('roundRobin', 3)) ~> source1",
				"source1 select(mapColumn(",
				"          LoanRange,",
				"          BusinessName,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          NAICSCode,",
				"          BusinessType,",
				"          RaceEthnicity,",
				"          Gender,",
				"          Veteran,",
				"          NonProfit,",
				"          JobsRetained,",
				"          DateApproved,",
				"          Lender,",
				"          CD",
				"     ),",
				"     partitionBy('key',",
				"          0,",
				"          Gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(DateApproved),",
				"     LoanRange = count(),",
				"          City = count()) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'files',",
				"     folderPath: 'DFoutput',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}