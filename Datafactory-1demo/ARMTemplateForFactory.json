{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Datafactory-1demo"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"LS_ABS_AutoVNIR_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ABS_AutoVNIR'"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"azsqldblink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azsqldblink'"
		},
		"pocDataLakeStoragegen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'pocDataLakeStoragegen2'"
		},
		"pocblobstorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pocblobstorage'"
		},
		"ABS_LS_SAS_Token_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "SAS-ABS-SAS-URI-Adfstorageaccount"
		},
		"AzureBlobStorage_SAS_test_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorage_SAS_test'"
		},
		"AzureDataLakeStorage_SPA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adfgen2account.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage_SPA_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "ced0eae1-0a0e-4ee4-9718-ca543d33fcb2"
		},
		"AzureDataLakeStorage_SPA_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "e75b636f6d3c4114b8718cda29438ad8"
		},
		"AzureKeyVault_ADF_ManagedUserIdentity_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ADFLinkSKeys.vault.azure.net/"
		},
		"AzureKeyVault_ADF_V1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ADFLinkSKeys.vault.azure.net/"
		},
		"AzureKeyVault_Vault_access_policy_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://LSAdlsVaultAccessPolicy.vault.azure.net/"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\OSI-L-0688\\sample"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "pmattaparti"
		},
		"LS_ABS_AccountKey_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ABS-adfgen2account-conn-String"
		},
		"LS_AzureBlobStorage_adfstorageaccount_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "SAS-ABS-SAS-URI-Adfstorageaccount"
		},
		"Ls_ABS_adfstorageaccounts_UAMI_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://adfstrorageaccounts.blob.core.windows.net/"
		},
		"Ls_ADLSGen2_Adfgen2accountstorage_SAMI_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().url_storage}"
		},
		"RestServicemp_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "\thttps://dummy.restapiexample.com/api/v1/employees"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqladfdbserver"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqfadfdb"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladfuser"
		},
		"WebConnector_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.careerpower.in/states-and-capitals-of-india.html"
		},
		"pocDataLakeStoragegen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adfgen2account.dfs.core.windows.net/"
		},
		"Master_trigger_properties_pipeline_parameters_windowStart": {
			"type": "string",
			"defaultValue": "04/15/2024 17:40:00"
		},
		"Master_trigger_properties_pipeline_parameters_windowEnd": {
			"type": "string",
			"defaultValue": "05//2024 18:45:00"
		},
		"Trigger_gwn_properties_pipeline_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"Trigger_gwn_properties_pipeline_parameters_windowEnd": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		},
		"trigger_ms_properties_pipeline_parameters_windowStart": {
			"type": "string",
			"defaultValue": "04/22/2024, 12:00:00 AM "
		},
		"trigger_ms_properties_pipeline_parameters_windowEnd": {
			"type": "string",
			"defaultValue": "04/22/2024, 12:15:00 AM "
		},
		"EndpointABSVNIR_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/6053644e-c095-4d41-90ad-43797b9dfe90/resourceGroups/darafactoryseries/providers/Microsoft.Storage/storageAccounts/adfstrorageaccounts"
		},
		"EndpointABSVNIR_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"EndpointABSVNIR_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"adfstrorageaccounts.blob.core.windows.net"
			]
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AddColumnInTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadataFile",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "datafile2",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"structure",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COLUMN_NAME\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = 'Other_employees'\n  AND TABLE_SCHEMA = 'dbo'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azsqldb",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadataFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadataFile').output.structure",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "HeadersList",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FColumnList",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "FileHeaderList",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileColumns",
							"value": {
								"value": "@variables('FColumnList')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "TableHeaderList",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TableColumns",
							"value": {
								"value": "@variables('TColumnList')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append TableList",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TColumnList",
										"value": {
											"value": "@item().COLUMN_NAME",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "AdditionalFinalColumnsList",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FinalColumns",
							"value": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "FileHeaderList",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "TableHeaderList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FileColumns')",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(contains(variables('TableColumns'),item()))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ColumnName",
							"value": {
								"value": "@string(activity('Filter1').output.value[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach3",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "AdditionalFinalColumnsList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FinalColumns')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "azsqldblink",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "ALTER TABLE Other_employees ADD @{item()} VARCHAR(30) NULL;",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"ColumnName": {
						"type": "String"
					},
					"FColumnList": {
						"type": "Array"
					},
					"FinalColumns": {
						"type": "Array"
					},
					"TableColumns": {
						"type": "Array"
					},
					"TColumnList": {
						"type": "Array"
					},
					"FileColumns": {
						"type": "Array"
					},
					"Fstr": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-15T11:39:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datafile2')]",
				"[concat(variables('factoryId'), '/datasets/azsqldb')]",
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Auditlogpipelinemappingdataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 2
						}
					},
					{
						"name": "Set LogFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "logfile",
							"value": {
								"value": "@int(concat(formatDateTime(utcnow(),'yyyy-MM-dd'),'_log.csv'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Metadata Of LogFile",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set LogFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Logauditsource",
								"type": "DatasetReference",
								"parameters": {
									"srclogfilename": {
										"value": "@variables('logfile')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata Of LogFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Metadata Of LogFile').output.exists,true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Data flow without logfile",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Auditlogdataflowwithoutfile",
											"type": "DataFlowReference",
											"parameters": {
												"ADFName": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{string('Success')}'",
													"type": "Expression"
												},
												"RunID": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"TriggerTime": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												},
												"LogFileName": {
													"value": "'@{variables('logfile')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Dummytsource": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Data flow with logfile",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Auditlogdataflowwithfile",
											"type": "DataFlowReference",
											"parameters": {
												"ADFName": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipelineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{string('Success')}'",
													"type": "Expression"
												},
												"RunID": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"TriggerTime": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												},
												"LogFileName": {
													"value": "'@{variables('logfile')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"logfilesource": {
													"srclogfilename": {
														"value": "@variables('logfile')",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "notify error",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": "https://prod-15.southindia.logic.azure.com:443/workflows/ecb0497422e041199050b83e97c4795b/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=QDxl6ZKeYPv0TyLEYEeR03ofAyE4AS2MBma0LGZQI7I",
							"body": {
								"value": "{\n    \"Pipeline\":\"@{pipeline().Pipeline}\",\n    \"ErrorMessage\":\"@{replace(variables('activityname'),'|','')}\",\n    \"DataFactoryName\":\"@{pipeline().DataFactory}\",\n    \"RunID\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed",
									"Skipped"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "activityname",
							"value": {
								"value": "@concat(activity('Set LogFile')?.Error?.message,'|',activity('Get Metadata Of LogFile')?.Error?.message,'|',activity('Data flow with logfile')?.Error?.message,'|',activity('Data flow without logfile')?.Error?.message\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"logfile": {
						"type": "String"
					},
					"activityname": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-27T09:33:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Logauditsource')]",
				"[concat(variables('factoryId'), '/dataflows/Auditlogdataflowwithoutfile')]",
				"[concat(variables('factoryId'), '/dataflows/Auditlogdataflowwithfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_gwn",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "files/employees/"
							},
							{
								"name": "Destination",
								"value": "dbo.{}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.windowStart",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().parameters.windowEnd",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "pocblobstorage",
									"type": "LinkedServiceReference"
								},
								"path": "webactivityoutput"
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_gwn",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_gwn",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "empfolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@pipeline().parameters.windowStart",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@pipeline().parameters.windowEnd",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Active",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "AuCopydata",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "InsertedAt",
													"value": {
														"value": "@utcnow()",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": {
													"value": "@pipeline().parameters.windowStart",
													"type": "Expression"
												},
												"modifiedDatetimeEnd": {
													"value": "@pipeline().parameters.windowEnd",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "pocblobstorage",
												"type": "LinkedServiceReference"
											},
											"path": "adfcondemo"
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_gwn",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_gwn",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@replace(item().name,'.csv','')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					},
					"windowEnd": {
						"type": "String"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-08T13:02:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_gwn')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_gwn')]",
				"[concat(variables('factoryId'), '/datasets/empfolder')]",
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFdemoCPYpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CPYDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "schemacopydf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ADLSsource": {},
									"DBsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-15T05:42:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/schemacopydf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lastupdatefilepipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "empfolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetMetadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "empfilefrmadls",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetMetadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('GetMetadata2').output.lastModified,variables('ReferenceDate'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "UpdateRefrencedate",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "ReferenceDate",
													"value": {
														"value": "@activity('GetMetadata2').output.lastModified",
														"type": "Expression"
													}
												}
											},
											{
												"name": "SetLastFile",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "UpdateRefrencedate",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "pipelineReturnValue",
													"value": [
														{
															"key": "file",
															"value": {
																"type": "Expression",
																"content": "@activity('GetMetadata2').output.itemName"
															}
														}
													],
													"setSystemVariable": true
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"LastFile": {
						"type": "String"
					},
					"ReferenceDate": {
						"type": "String",
						"defaultValue": "\"2000-01-01T00:00:00Z\""
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-08T08:26:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empfolder')]",
				"[concat(variables('factoryId'), '/datasets/empfilefrmadls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Samplecopypipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "InsertedAt",
										"value": {
											"value": "@formatDateTime(addDays(utcnow(), -2), 'yyyy-MM-ddTHH:mm:ssZ')\r\n",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Age",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Age",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Department",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Salary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Salary",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "InsertedAt",
											"type": "String"
										},
										"sink": {
											"name": "InsertedAt",
											"type": "DateTime",
											"physicalType": "date"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Emp_100DelimitedTextABS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DFfiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-24T07:17:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Emp_100DelimitedTextABS')]",
				"[concat(variables('factoryId'), '/datasets/DFfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/checkdatapipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup in table",
						"type": "Lookup",
						"state": "Active",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TOP 1 COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='@{pipeline().parameters.tablename}' AND TABLE_SCHEMA = 'dbo' AND COLUMN_NAME  LIKE '%ID%' ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DBfolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "UpsertColumn",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup in table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "column",
									"value": {
										"type": "Expression",
										"content": "@activity('Lookup in table').output.value[0].COLUMN_NAME"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"variables": {
					"ColumnName": {
						"type": "Array"
					},
					"Column": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-09T09:30:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DBfolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dev1_cpypipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DfS1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DFfiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DfS1')]",
				"[concat(variables('factoryId'), '/datasets/DFfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dmpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "AppendUcolumn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "InsertedAt",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@pipeline().parameters.file",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": {
										"value": "@variables('Ucolumn')",
										"type": "Expression"
									}
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_gwn",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.file",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_gwn",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@replace(pipeline().parameters.file,'.csv','')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "checkdatapipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tablename": {
									"value": "@replace(pipeline().parameters.file,'.csv','')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "AppendUcolumn",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Ucolumn",
							"value": {
								"value": "@activity('Execute Pipeline1').output.pipelineReturnValue.column",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"file": {
						"type": "string"
					}
				},
				"variables": {
					"Ucolumn": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-09T09:31:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_gwn')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_gwn')]",
				"[concat(variables('factoryId'), '/pipelines/checkdatapipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emailnotifypipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "nofileDelimitedText",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DFfiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-type": "application/json"
							},
							"url": "https://prod-15.southindia.logic.azure.com:443/workflows/ecb0497422e041199050b83e97c4795b/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=QDxl6ZKeYPv0TyLEYEeR03ofAyE4AS2MBma0LGZQI7I",
							"body": {
								"value": "{\n    \"Pipeline\":\"@{pipeline().Pipeline}\",\n    \"ErrorMessage\":\"@{activity('Copy data1').Error.Message}\",\n    \"DataFactoryName\":\"@{pipeline().DataFactory}\",\n    \"RunID\":\"@{pipeline().RunId}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-28T07:35:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/nofileDelimitedText')]",
				"[concat(variables('factoryId'), '/datasets/DFfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/if_fullload_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check file in folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "upload data",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "check file in folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('check file in folder').output.exists,true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy datafromgen2sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Employee ID",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Employee ID",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "Name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Name",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "Age",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Age",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "Department",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Department",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "Salary",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Salary",
														"type": "String",
														"physicalType": "nvarchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "gen2Textfile1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "azsqldb",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-15T11:39:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/gen2Textfile1')]",
				"[concat(variables('factoryId'), '/datasets/azsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inloadpipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"EmployeeID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Employee ID",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmployeeID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Age",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "Age",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Department",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Salary",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "Salary",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Remove_Duplicates_from _emp",
						"description": "delete duplicate  records ",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "azsqldblink",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DELETE FROM dbo.emp\nWHERE EmployeeID IN (\n    SELECT EmployeeID\n    FROM (\n        SELECT EmployeeID,\n               ROW_NUMBER() OVER (PARTITION BY Name, Age, Department ORDER BY EmployeeID DESC) AS row_num\n        FROM dbo.emp\n    ) AS subquery\n    WHERE row_num > 1\n)"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"child item": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-15T10:08:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/multipefolderspipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadataOfFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "empfolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFileInEmployeedir",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadataOfFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadataOfFiles').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy dataFiles2Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"EmployeeID"
												]
											},
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "empfilefrmadls",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "multipletables",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@replace(item().name, '.csv','')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-06T11:25:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empfolder')]",
				"[concat(variables('factoryId'), '/datasets/empfilefrmadls')]",
				"[concat(variables('factoryId'), '/datasets/multipletables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/multipefolderspipeline_full_incremental_V1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadataOfFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "empfolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@pipeline().parameters.windowStart",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@pipeline().parameters.windowEnd",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFileInfolder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadataOfFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadataOfFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "GetMetadataoftable",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "multipletables",
											"type": "DatasetReference",
											"parameters": {
												"tablename": {
													"value": "@replace(item().name,'.csv','')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										]
									}
								},
								{
									"name": "filename",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "file",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ConditionToCheckTableExistsOrNot",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetMetadataoftable",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('GetMetadataoftable').output.exists,not(true))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "UpsertCopyActivity",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "AppendUpsertColumn",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"additionalColumns": [
															{
																"name": "InsertedAt",
																"value": {
																	"value": "@utcnow()",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"modifiedDatetimeStart": {
																"value": "@pipeline().parameters.windowStart",
																"type": "Expression"
															},
															"modifiedDatetimeEnd": {
																"value": "@pipeline().parameters.windowEnd",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@variables('file')",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "upsert",
														"upsertSettings": {
															"useTempDB": true,
															"keys": {
																"value": "@variables('UpsertColumn')",
																"type": "Expression"
															}
														},
														"sqlWriterUseTableLock": false,
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "adlsempfile",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@variables('file')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "multipletables",
														"type": "DatasetReference",
														"parameters": {
															"tablename": {
																"value": "@replace(variables('file'),'.csv','')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "ExecutecheckPipelineForColumn",
												"description": "to get the column",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "checkdatapipeline",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"tablename": {
															"value": "@replace(variables('file'),'.csv','')",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "AppendUpsertColumn",
												"type": "AppendVariable",
												"dependsOn": [
													{
														"activity": "ExecutecheckPipelineForColumn",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "UpsertColumn",
													"value": {
														"value": "@activity('ExecutecheckPipelineForColumn').output.pipelineReturnValue.column",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "AutoCopyActivity",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"additionalColumns": [
															{
																"name": "InsertedAt",
																"value": {
																	"value": "@utcnow()",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"modifiedDatetimeStart": {
																"value": "@pipeline().parameters.windowStart",
																"type": "Expression"
															},
															"modifiedDatetimeEnd": {
																"value": "@pipeline().parameters.windowEnd",
																"type": "Expression"
															},
															"wildcardFileName": {
																"value": "@variables('file')",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "empfilefrmadls",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@variables('file')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "multipletables",
														"type": "DatasetReference",
														"parameters": {
															"tablename": {
																"value": "@replace(variables('file'),'.csv','')",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"windowStart": {
						"type": "string"
					},
					"windowEnd": {
						"type": "string"
					}
				},
				"variables": {
					"file": {
						"type": "String"
					},
					"UpsertColumn": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-09T09:31:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empfolder')]",
				"[concat(variables('factoryId'), '/datasets/multipletables')]",
				"[concat(variables('factoryId'), '/datasets/adlsempfile')]",
				"[concat(variables('factoryId'), '/pipelines/checkdatapipeline')]",
				"[concat(variables('factoryId'), '/datasets/empfilefrmadls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_AutoMaganedVirtualNetworkIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy dataManagedVN",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "sourceAMVNIR",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sinkAMVNIR",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-22T08:27:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourceAMVNIR')]",
				"[concat(variables('factoryId'), '/datasets/sinkAMVNIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_REQ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_data_REQ",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": "InsertedAt",
									"partitionUpperBound": "",
									"partitionLowerBound": ""
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Age",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Age",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Department",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Department",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Salary",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Salary",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "InsertedAt",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "InsertedAt",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Emp_300",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Req_ParquetBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow_Req",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_REQ",
								"type": "DataFlowReference",
								"parameters": {
									"flname": {
										"value": "'@{pipeline().parameters.name}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Employee300Tablesource": {
										"tablename": {
											"value": "@pipeline().parameters.name",
											"type": "Expression"
										}
									},
									"BlobParqetsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-24T07:17:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Emp_300')]",
				"[concat(variables('factoryId'), '/datasets/Req_ParquetBlob')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_REQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_ppp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowPPP",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PPPdataflowtransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-17T10:06:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PPPdataflowtransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/webpipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "readrestapi",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://jsonplaceholder.typicode.com/users"
						}
					},
					{
						"name": "otptoblob",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "readrestapi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "PUT",
							"headers": {
								"x-ms-blob-type": "BlockBlob"
							},
							"url": "https://adfstrorageaccounts.blob.core.windows.net/webactivityoutput/weboutput.json?sp=racw&st=2024-04-16T10:45:47Z&se=2024-04-16T18:45:47Z&spr=https&sv=2022-11-02&sr=c&sig=krdS4qJeRT1iePmJf%2B7AzRzGC7OtlgShC0d8GczU0TM%3D",
							"body": {
								"value": "@activity('readrestapi').output",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-16T10:53:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/webtablepipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromwebTable",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "WebSource"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Column1",
											"type": "String"
										},
										"sink": {
											"name": "Column1",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Column2",
											"type": "String"
										},
										"sink": {
											"name": "Column2",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WebTableDataset1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "wetablefile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-21T10:16:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WebTableDataset1')]",
				"[concat(variables('factoryId'), '/datasets/wetablefile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsqldblink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmployeeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Department",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DBfolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsqldblink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "jdata.json",
						"fileSystem": "files"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"employee_name": {
							"type": "string"
						},
						"employee_salary": {
							"type": "integer"
						},
						"employee_age": {
							"type": "integer"
						},
						"skills": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"contact": {
							"type": "object",
							"properties": {
								"mobile": {
									"type": "integer"
								},
								"mail": {
									"type": "string"
								}
							}
						},
						"Address": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "SampleOutput",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "data.csv",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_7ml')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsqldblink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_gwn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsqldblink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "\"TABLE\""
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DfS1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp1.csv",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "DepartmentID",
						"type": "String"
					},
					{
						"name": "DepartmentName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DfS2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept.csv",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DepartmentID",
						"type": "String"
					},
					{
						"name": "DepartmentName",
						"type": "String"
					},
					{
						"name": "Location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DfS3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Data2.csv",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Apple",
						"type": "String"
					},
					{
						"name": "Beetroot",
						"type": "String"
					},
					{
						"name": "Carrot",
						"type": "String"
					},
					{
						"name": "Dates",
						"type": "String"
					},
					{
						"name": "Kiwi",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dumylogfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummylogfl.txt",
						"container": "adfcondemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "log",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Emp_100DelimitedTextABS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Tabledata.csv",
						"container": "adfcondemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Emp_300')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsqldblink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Department",
						"type": "nvarchar"
					},
					{
						"name": "Salary",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertedAt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FinanceEmpfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Finance_employees.csv",
						"folderPath": "employees",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Logauditsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "pipelinelogs",
						"container": "adfcondemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Logauditsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocblobstorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"srclogfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().srclogfilename",
							"type": "Expression"
						},
						"folderPath": "pipelinelogs",
						"container": "adfcondemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewDataUpdatedfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPP_Loan_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ABS_LS_SAS_Token",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PPP_data_150k_plus.csv",
						"container": "adfcondemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "LoanRange",
						"type": "String"
					},
					{
						"name": "BusinessName",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "NAICSCode",
						"type": "String"
					},
					{
						"name": "BusinessType",
						"type": "String"
					},
					{
						"name": "RaceEthnicity",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran",
						"type": "String"
					},
					{
						"name": "NonProfit",
						"type": "String"
					},
					{
						"name": "JobsRetained",
						"type": "String"
					},
					{
						"name": "DateApproved",
						"type": "String"
					},
					{
						"name": "Lender",
						"type": "String"
					},
					{
						"name": "CD",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ABS_LS_SAS_Token')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Req_ParquetBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output-req"
					},
					"compressionCodec": "none"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_7ml')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "employees",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_gwn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "employees",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WebTableDataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WebConnector",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "WebTable",
				"schema": [],
				"typeProperties": {
					"index": 0
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WebConnector')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsempfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "employees",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azsqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsqldblink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmployeeID",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Age",
						"type": "nvarchar"
					},
					{
						"name": "Department",
						"type": "nvarchar"
					},
					{
						"name": "Salary",
						"type": "nvarchar"
					},
					{
						"name": "InsertedAt",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Finance_employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datafile2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Sales_employees.csv",
						"folderPath": "employees",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Employee ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empfilefrmadls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "employees",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empfolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "employees",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fromrestapi')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServicemp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestServicemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/gen2Textfile1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "data.csv",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/multipletables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azsqldblink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azsqldblink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/newempdatafile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocDataLakeStoragegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "newempdata.csv",
						"fileSystem": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/nofileDelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "abc.csv",
						"container": "adfcondemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputofapiJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "resttojsn.json",
						"container": "adfcondemo"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkAMVNIR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABS_AutoVNIR",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output-req"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABS_AutoVNIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourceAMVNIR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABS_AutoVNIR",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "states.csv",
						"container": "adfcondemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABS_AutoVNIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wetablefile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pocblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "states.csv",
						"container": "adfcondemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pocblobstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ABS_LS_SAS_Token')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_Vault_access_policy",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('ABS_LS_SAS_Token_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_Vault_access_policy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_SAS_test')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorage_SAS_test_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_SPA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_SPA_properties_typeProperties_url')]",
					"tenant": "[parameters('AzureDataLakeStorage_SPA_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('AzureDataLakeStorage_SPA_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_ADF_V1",
							"type": "LinkedServiceReference"
						},
						"secretName": "ADLSGen2-storage-ADF"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_ADF_V1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_ADF_ManagedUserIdentity')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_ADF_ManagedUserIdentity_properties_typeProperties_baseUrl')]",
					"credential": {
						"referenceName": "credential_ADF_Managed_Id",
						"type": "CredentialReference"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/credentials/credential_ADF_Managed_Id')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_ADF_V1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Key vault created using system assigned managed identity",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_ADF_V1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_Vault_access_policy')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_Vault_access_policy_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "on prem",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "onpremMysqlruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/onpremMysqlruntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABS_AccountKey')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_Vault_access_policy",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ABS_AccountKey_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_Vault_access_policy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABS_AutoVNIR')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_ABS_AutoVNIR_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoVNIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoVNIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureBlobStorage_adfstorageaccount')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_Vault_access_policy",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_AzureBlobStorage_adfstorageaccount_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_Vault_access_policy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_ABS_adfstorageaccounts_UAMI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Blob storage linked service with User Assigned Managed Identity",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('Ls_ABS_adfstorageaccounts_UAMI_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2",
					"credential": {
						"referenceName": "credential_ADF_Managed_Id",
						"type": "CredentialReference"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/credentials/credential_ADF_Managed_Id')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_ADLSGen2_Adfgen2accountstorage_SAMI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "creating data lake storage  using  sys assigned managed identity",
				"parameters": {
					"url_storage": {
						"type": "string",
						"defaultValue": "https://adfgen2account.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Ls_ADLSGen2_Adfgen2accountstorage_SAMI_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServicemp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServicemp_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"hostNameInCertificate": "",
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WebConnector')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Web",
				"typeProperties": {
					"url": "[parameters('WebConnector_properties_typeProperties_url')]",
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "onpremMysqlruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/onpremMysqlruntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azsqldblink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('azsqldblink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pocDataLakeStoragegen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('pocDataLakeStoragegen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('pocDataLakeStoragegen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pocblobstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('pocblobstorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger that executes full load and incremental load pipeline",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "multipefolderspipeline_full_incremental_V1",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowStart": "[parameters('Master_trigger_properties_pipeline_parameters_windowStart')]",
						"windowEnd": "[parameters('Master_trigger_properties_pipeline_parameters_windowEnd')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-04-19T00:00:00Z",
					"endTime": "2024-05-09T12:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/multipefolderspipeline_full_incremental_V1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_gwn')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "CopyPipeline_incremental",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowStart": "[parameters('Trigger_gwn_properties_pipeline_parameters_windowStart')]",
						"windowEnd": "[parameters('Trigger_gwn_properties_pipeline_parameters_windowEnd')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-04-15T10:25:00Z",
					"endTime": "2024-05-09T10:39:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline_incremental')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demotrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "checkdatapipeline",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-05-08T07:23:00Z",
					"endTime": "2024-05-09T07:23:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/checkdatapipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_ms')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "multipefolderspipeline_full_incremental_V1",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowStart": "[parameters('trigger_ms_properties_pipeline_parameters_windowStart')]",
						"windowEnd": "[parameters('trigger_ms_properties_pipeline_parameters_windowEnd')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-04-22T00:00:00Z",
					"endTime": "2024-05-10T07:05:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/multipefolderspipeline_full_incremental_V1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoVNIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "South India",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						},
						"copyComputeScaleProperties": {
							"dataIntegrationUnit": 16,
							"timeToLive": 5
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 10,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onpremMysqlruntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "on prem",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Auditlogdataflowwithfile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dumylogfile",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Logauditsource",
								"type": "DatasetReference"
							},
							"name": "logfilesource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Logauditsink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ADFName as string,",
						"     PipelineName as string,",
						"     Status as string,",
						"     RunID as string,",
						"     TriggerName as string,",
						"     TriggerTime as string,",
						"     LogFileName as string",
						"}",
						"source(output(",
						"          log as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[('pipelinelogs/'+$LogFileName)]) ~> logfilesource",
						"source1 derive(ADFName = $ADFName,",
						"          PipelineName = $PipelineName,",
						"          Status = $Status,",
						"          RunID = $RunID,",
						"          TriggerName = $TriggerName,",
						"          TriggerTime = $TriggerTime) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ADFName,",
						"          PipelineName,",
						"          Status,",
						"          RunID,",
						"          TriggerName,",
						"          TriggerTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, logfilesource union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($LogFileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ADFName,",
						"          PipelineName,",
						"          Status,",
						"          RunID,",
						"          TriggerName,",
						"          TriggerTime",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Dumylogfile')]",
				"[concat(variables('factoryId'), '/datasets/Logauditsource')]",
				"[concat(variables('factoryId'), '/datasets/Logauditsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Auditlogdataflowwithoutfile')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dumylogfile",
								"type": "DatasetReference"
							},
							"name": "Dummytsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Logauditsink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ADFName as string,",
						"     PipelineName as string,",
						"     Status as string,",
						"     RunID as string,",
						"     TriggerName as string,",
						"     TriggerTime as string,",
						"     LogFileName as string",
						"}",
						"source(output(",
						"          log as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Dummytsource",
						"Dummytsource derive(ADFName = $ADFName,",
						"          PipelineName = $PipelineName,",
						"          Status = $Status,",
						"          RunID = $RunID,",
						"          TriggerName = $TriggerName,",
						"          TriggerTime = $TriggerTime) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ADFName,",
						"          PipelineName,",
						"          Status,",
						"          RunID,",
						"          TriggerName,",
						"          TriggerTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($LogFileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ADFName,",
						"          PipelineName,",
						"          Status,",
						"          RunID,",
						"          TriggerName,",
						"          TriggerTime",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Dumylogfile')]",
				"[concat(variables('factoryId'), '/datasets/Logauditsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PPPdataflowtransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PPP_Loan_Dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ABS_AccountKey",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LoanRange as string,",
						"          BusinessName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          Zip as string,",
						"          NAICSCode as string,",
						"          BusinessType as string,",
						"          RaceEthnicity as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          NonProfit as string,",
						"          JobsRetained as string,",
						"          DateApproved as string,",
						"          Lender as string,",
						"          CD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('roundRobin', 3)) ~> source1",
						"source1 select(mapColumn(",
						"          LoanRange,",
						"          BusinessName,",
						"          Address,",
						"          City,",
						"          State,",
						"          Zip,",
						"          NAICSCode,",
						"          BusinessType,",
						"          RaceEthnicity,",
						"          Gender,",
						"          Veteran,",
						"          NonProfit,",
						"          JobsRetained,",
						"          DateApproved,",
						"          Lender,",
						"          CD",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(DateApproved),",
						"     LoanRange = count(),",
						"          City = count()) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'files',",
						"     folderPath: 'DFoutput',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PPP_Loan_Dataset')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ABS_AccountKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_REQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Emp_300",
								"type": "DatasetReference"
							},
							"name": "Employee300Tablesource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Req_ParquetBlob",
								"type": "DatasetReference"
							},
							"name": "BlobParqetsink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     flname as string",
						"}",
						"source(output(",
						"          Id as integer,",
						"          Name as string,",
						"          Age as integer,",
						"          Department as string,",
						"          Salary as integer,",
						"          InsertedAt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     waterMarkColumn: 'Id',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('key',",
						"          0,",
						"          InsertedAt",
						"     )) ~> Employee300Tablesource",
						"Employee300Tablesource derive(Filename = concat($flname, toString(InsertedAt), '.parquet')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'Filename',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BlobParqetsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Emp_300')]",
				"[concat(variables('factoryId'), '/datasets/Req_ParquetBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demodataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DfS1",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "DfS2",
								"type": "DatasetReference"
							},
							"name": "department"
						},
						{
							"dataset": {
								"referenceName": "azsqldb",
								"type": "DatasetReference"
							},
							"name": "finanaceEmployeetable"
						},
						{
							"dataset": {
								"referenceName": "FinanceEmpfile",
								"type": "DatasetReference"
							},
							"name": "FinanaceEmpfile"
						},
						{
							"dataset": {
								"referenceName": "DfS3",
								"type": "DatasetReference"
							},
							"name": "UnpivotDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DFfiles",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "UsernameAndFullnameComns"
						},
						{
							"name": "aggregateonDepart"
						},
						{
							"name": "splitbasedondepartmentname"
						},
						{
							"name": "selectExceptdepartmentID"
						},
						{
							"name": "sortAgeBelow"
						},
						{
							"name": "RowsDsntExists"
						},
						{
							"name": "pivotonGender"
						},
						{
							"name": "unpivot1"
						},
						{
							"name": "window1"
						},
						{
							"name": "filterFisrtRankRecords"
						},
						{
							"name": "lookupfornewrecords"
						},
						{
							"name": "join2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          DepartmentID as string,",
						"          Age as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          DepartmentID as string,",
						"          DepartmentName as string,",
						"          Location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"source(output(",
						"          EmployeeID as string,",
						"          Name as string,",
						"          Age as string,",
						"          Department as string,",
						"          Salary as string,",
						"          InsertedAt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> finanaceEmployeetable",
						"source(output(",
						"          EmployeeID as string,",
						"          Name as string,",
						"          Age as string,",
						"          Department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FinanaceEmpfile",
						"source(output(",
						"          Vendor as string,",
						"          Apple as string,",
						"          Beetroot as string,",
						"          Carrot as string,",
						"          Dates as string,",
						"          Kiwi as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnpivotDatasource",
						"UsernameAndFullnameComns, department join(employee@DepartmentID == department@DepartmentID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"employee derive(UserName = lower(concat(substring(FirstName,1,1),LastName)),",
						"          FullName = concat(FirstName,LastName),",
						"     partitionBy('roundRobin', 2)) ~> UsernameAndFullnameComns",
						"join1 aggregate(groupBy(DepartmentName),",
						"     TotalEmployeesPerDepartment = count(EmployeeID)) ~> aggregateonDepart",
						"selectExceptdepartmentID split(lesserOrEqual(Age,'30'),",
						"     greater(Age,'30')&&lesserOrEqual(Age,'40'),",
						"     disjoint: false) ~> splitbasedondepartmentname@(Below30, Above30, experiencedAbove40)",
						"join1 select(mapColumn(",
						"          EmployeeID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          Age,",
						"          Gender,",
						"          UserName,",
						"          FullName,",
						"          DepartmentName,",
						"          Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectExceptdepartmentID",
						"splitbasedondepartmentname@Below30 sort(asc(toInteger(EmployeeID), true),",
						"     caseInsensitive: true) ~> sortAgeBelow",
						"FinanaceEmpfile, finanaceEmployeetable exists(FinanaceEmpfile@EmployeeID == finanaceEmployeetable@EmployeeID,",
						"     negate:true,",
						"     broadcast: 'auto')~> RowsDsntExists",
						"join1 pivot(groupBy(DepartmentName),",
						"     pivotBy(Gender),",
						"     {} = count(EmployeeID),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotonGender",
						"UnpivotDatasource unpivot(output(",
						"          Fruits as string,",
						"          Quantity as string",
						"     ),",
						"     ungroupBy(Vendor),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"employee window(over(DepartmentID),",
						"     desc(Salary, true),",
						"     DenseRank = denseRank(),",
						"     partitionBy('key',",
						"          0,",
						"          DepartmentID",
						"     )) ~> window1",
						"window1 filter(DenseRank==1) ~> filterFisrtRankRecords",
						"FinanaceEmpfile, finanaceEmployeetable lookup(FinanaceEmpfile@EmployeeID == finanaceEmployeetable@EmployeeID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookupfornewrecords",
						"UsernameAndFullnameComns, department join(employee@DepartmentID == department@DepartmentID,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"sortAgeBelow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeeID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          Age,",
						"          Gender,",
						"          UserName,",
						"          FullName,",
						"          DepartmentName,",
						"          Location",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DfS1')]",
				"[concat(variables('factoryId'), '/datasets/DfS2')]",
				"[concat(variables('factoryId'), '/datasets/azsqldb')]",
				"[concat(variables('factoryId'), '/datasets/FinanceEmpfile')]",
				"[concat(variables('factoryId'), '/datasets/DfS3')]",
				"[concat(variables('factoryId'), '/datasets/DFfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demodataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DFJson",
								"type": "DatasetReference"
							},
							"name": "JsonSource"
						},
						{
							"dataset": {
								"referenceName": "datafile2",
								"type": "DatasetReference"
							},
							"name": "salesdatafile"
						},
						{
							"dataset": {
								"referenceName": "FinanceEmpfile",
								"type": "DatasetReference"
							},
							"name": "Finanacedatafile"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "Employeetablesource"
						},
						{
							"dataset": {
								"referenceName": "newempdatafile",
								"type": "DatasetReference"
							},
							"name": "newempdatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DFfiles",
								"type": "DatasetReference"
							},
							"name": "Flattensink",
							"rejectedDataLinkedService": {
								"referenceName": "pocDataLakeStoragegen2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "DFfiles",
								"type": "DatasetReference"
							},
							"name": "Formatterssink",
							"rejectedDataLinkedService": {
								"referenceName": "pocDataLakeStoragegen2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "cachesink"
						},
						{
							"dataset": {
								"referenceName": "NewDataUpdatedfile",
								"type": "DatasetReference"
							},
							"name": "empsink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "parseaddress"
						},
						{
							"name": "stringifyContact"
						},
						{
							"name": "parseconcat"
						},
						{
							"name": "union1"
						},
						{
							"name": "EmployeeIDKey"
						},
						{
							"name": "derivedEmployeeIDColumntoUpdated"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Address as string,",
						"          contact as (mail as string, mobile as long),",
						"          employee_age as short,",
						"          employee_name as string,",
						"          employee_salary as integer,",
						"          id as short,",
						"          skills as string[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> JsonSource",
						"source(output(",
						"          EmployeeID as string,",
						"          Name as string,",
						"          Department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> salesdatafile",
						"source(output(",
						"          EmployeeID as string,",
						"          Name as string,",
						"          Age as string,",
						"          Department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Finanacedatafile",
						"source(output(",
						"          MaxEmpID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(EmployeeID) as MaxEmpID from dbo.emp',",
						"     format: 'query') ~> Employeetablesource",
						"source(output(",
						"          Name as string,",
						"          Age as integer,",
						"          Department as string,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> newempdatasource",
						"JsonSource foldDown(unroll(skills),",
						"     mapColumn(",
						"          id,",
						"          employee_name,",
						"          employee_salary,",
						"          employee_age,",
						"          skills",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"JsonSource parse(Address = Address ? (state as string,",
						"          street as string,",
						"          pincode as string),",
						"     partitionBy('hash', 1),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parseaddress",
						"parseaddress stringify(contact = contact ? string,",
						"     format: 'json') ~> stringifyContact",
						"stringifyContact parse({contact information} = contact ? (mail as string,",
						"          mobile as long),",
						"     partitionBy('hash', 1),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseconcat",
						"salesdatafile, Finanacedatafile union(byName: true)~> union1",
						"newempdatasource keyGenerate(output(EmployeeID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> EmployeeIDKey",
						"EmployeeIDKey derive(EmployeeID = toInteger(EmployeeID + cachesink#outputs()[1].MaxEmpID)) ~> derivedEmployeeIDColumntoUpdated",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FlattenOData.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Flattensink",
						"parseconcat sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FormattedData.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          employee_name,",
						"          employee_age,",
						"          employee_salary,",
						"          skills,",
						"          mail = {contact information}.mail,",
						"          mobile = {contact information}.mobile,",
						"          state = Address.state,",
						"          street = Address.street,",
						"          pincode = Address.pincode",
						"     ),",
						"     partitionBy('hash', 1)) ~> Formatterssink",
						"Employeetablesource sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> cachesink",
						"derivedEmployeeIDColumntoUpdated sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          EmployeeID,",
						"          Name,",
						"          Age,",
						"          Department,",
						"          Salary",
						"     ),",
						"     partitionBy('hash', 1)) ~> empsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DFJson')]",
				"[concat(variables('factoryId'), '/datasets/datafile2')]",
				"[concat(variables('factoryId'), '/datasets/FinanceEmpfile')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/newempdatafile')]",
				"[concat(variables('factoryId'), '/datasets/DFfiles')]",
				"[concat(variables('factoryId'), '/linkedServices/pocDataLakeStoragegen2')]",
				"[concat(variables('factoryId'), '/datasets/NewDataUpdatedfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/schemacopydf')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "gen2Textfile1",
								"type": "DatasetReference"
							},
							"name": "ADLSsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "DBsink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> ADLSsource",
						"ADLSsource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeeID as integer,",
						"          Name as string,",
						"          Age as integer,",
						"          Department as string,",
						"          Salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DBsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/gen2Textfile1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential_ADF_Managed_Id')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/6053644e-c095-4d41-90ad-43797b9dfe90/resourceGroups/darafactoryseries/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ADF_Managed_Id"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/EndpointABSVNIR')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('EndpointABSVNIR_properties_privateLinkResourceId')]",
				"groupId": "[parameters('EndpointABSVNIR_properties_groupId')]",
				"fqdns": "[parameters('EndpointABSVNIR_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}